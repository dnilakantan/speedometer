{"version":3,"sources":["Speedometer.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Speedometer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","speed","accuracy","unitkmh","getoStatusOk","lat","longi","forceRender","_this2","navigator","geolocation","console","log","watchPosition","p","_onPosition","err","_onErrorPosition","enableHighAccuracy","timeout","maximumAge","_getSpeed","react_default","a","createElement","position","coords","setState","geoStatusOk","latitude","longitude","error","React","Component","App","className","src","logo","alt","src_Speedometer","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__"],"mappings":"yOAyFeA,qBA9EX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,OAAQ,EACRC,SAAU,EACVC,SAAS,EACTC,cAAc,EACdC,IAAK,EACLC,MAAO,GAEXb,EAAKc,aAAc,EAVJd,mFAaC,IAAAe,EAAAZ,KAEZa,UAAUC,cACVC,QAAQC,IAAI,sCACZH,UAAUC,YAAYG,cAClB,SAACC,GAAD,OAAON,EAAKO,YAAYD,IACxB,SAACE,GAAD,OAASR,EAAKS,iBAAiBD,IAC/B,CAAEE,oBAAoB,EAAMC,QAAS,IAAMC,WAAY,sCAMjDxB,KAAKyB,YACCzB,KAAKW,YAEzB,OADAX,KAAKW,aAAc,EAEfe,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,wBACa5B,KAAKI,MAAME,SACtBoB,EAAAC,EAAAC,cAAA,WAFF,UAGU5B,KAAKI,MAAMC,MACnBqB,EAAAC,EAAAC,cAAA,WAJF,QAKQ5B,KAAKI,MAAMK,IACjBiB,EAAAC,EAAAC,cAAA,WANF,SAOS5B,KAAKI,MAAMM,4CAQ1B,IAAIL,EAAQL,KAAKI,MAAMC,MAEvB,OAAa,MAATA,GACQ,GAGRL,KAAKI,MAAMG,UACXF,GAAS,KAGNA,uCAGCwB,GACRd,QAAQC,IAAI,aAAea,EAASC,OAAOzB,MAAQ,IAAMwB,EAASC,OAAOxB,UACzEN,KAAK+B,SAAS,CACV1B,MAAOwB,EAASC,OAAOzB,MACvBC,SAAUuB,EAASC,OAAOxB,SAC1B0B,aAAa,EACbvB,IAAKoB,EAASC,OAAOG,SACrBvB,MAAOmB,EAASC,OAAOI,qDAIdC,GACbpB,QAAQC,IAAI,uBACZhB,KAAK+B,SAAS,CACVC,aAAa,WA3ECI,IAAMC,YCoBjBC,mLAtBX,OACEZ,EAAAC,EAAAC,cAAA,OAAKW,UAAU,OACbb,EAAAC,EAAAC,cAAA,UAAQW,UAAU,cAChBb,EAAAC,EAAAC,cAAA,OAAKY,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzChB,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,0BADP,wBAGAF,EAAAC,EAAAC,cAACe,EAAD,MACAjB,EAAAC,EAAAC,cAAA,KACEW,UAAU,WACVK,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,wBAVQT,aCOEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmB3C,WACrBA,UAAU4C,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAA9C,EAAuB","file":"static/js/main.f9206e2c.chunk.js","sourcesContent":["import React from 'react';\n\n// import the component\n//import Toggle from \"react-toggle-component\"\n//import \"react-toggle-component/styles.css\"\n\n//import ReactSpeedometer from \"react-d3-speedometer\";\n//import * as d3 from 'd3';\n\nclass Speedometer extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            speed: -1,\n            accuracy: 0,\n            unitkmh: false,\n            getoStatusOk: false,\n            lat: 0,\n            longi: 0,\n        };\n        this.forceRender = false;\n    }\n    \n    componentDidMount() {\n\n        if (navigator.geolocation) {\n            console.log(\"navigator.geolocation is available\");\n            navigator.geolocation.watchPosition(\n                (p) => this._onPosition(p),\n                (err) => this._onErrorPosition(err),\n                { enableHighAccuracy: true, timeout: 1000, maximumAge: 0 }\n            );\n        }\n    }\n\n    render() {\n        const speed = this._getSpeed();\n        const forceRender = this.forceRender;\n        this.forceRender = false;\n        return (\n            <div>\n              <div>\n                Accuracy: {this.state.accuracy} \n                <br/>\n                Speed: {this.state.speed} \n                <br/>\n                Lat: {this.state.lat}\n                <br/>\n                Long: {this.state.longi}\n              </div>\n            </div>\n        )\n    }\n\n\n    _getSpeed() {\n        let speed = this.state.speed;\n        // if speed is null OR // if accuracy is not accurate\n        if (speed == null) {\n            return -1;\n        }\n        // speed is meter per second, convert kmh\n        if (this.state.unitkmh) {\n            speed *= 3.6;\n        }\n\n        return speed;\n    }\n\n    _onPosition(position) {\n        console.log(\"set state \" + position.coords.speed + \" \" + position.coords.accuracy);\n        this.setState({\n            speed: position.coords.speed,\n            accuracy: position.coords.accuracy,\n            geoStatusOk: true,\n            lat: position.coords.latitude,\n            longi: position.coords.longitude,\n        });\n    }\n\n    _onErrorPosition(error) {\n        console.log(\"error state {error}\");\n        this.setState({\n            geoStatusOk: false,\n        });\n    }\n}\n\nexport default Speedometer;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Speedometer from './Speedometer';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/APP.js</code> and save to reload.\n          </p>\n          <Speedometer />\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}